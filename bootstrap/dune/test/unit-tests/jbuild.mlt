(* -*- tuareg -*- *)
open Dune;;
open Stdune;;

let sexp_pp = Sexp.pp Dune;;
#install_printer Jbuild.Mode_conf.pp;;
#install_printer Binary_kind.pp;;
#install_printer sexp_pp;;

(* Jbuild.Executables.Link_mode.t *)
let test s =
  Sexp.Of_sexp.parse Jbuild.Executables.Link_mode.t Univ_map.empty
    (Sexp.parse_string ~fname:"" ~mode:Sexp.Parser.Mode.Single s)
[%%expect{|
val sexp_pp : Format.formatter -> Usexp.t -> unit = <fun>
val test : string -> Jbuild.Executables.Link_mode.t = <fun>
|}]

(* Link modes can be read as a (<mode> <kind>) list *)
test "(best exe)"
[%%expect{|
- : Jbuild.Executables.Link_mode.t = {mode = best; kind = exe}
|}]

(* Some shortcuts also exist *)
test "exe"
[%%expect{|
- : Jbuild.Executables.Link_mode.t = {mode = best; kind = exe}
|}]
test "object"
[%%expect{|
- : Jbuild.Executables.Link_mode.t = {mode = best; kind = object}
|}]
test "shared_object"
[%%expect{|
- : Jbuild.Executables.Link_mode.t = {mode = best; kind = shared_object}
|}]
test "byte"
[%%expect{|
- : Jbuild.Executables.Link_mode.t = {mode = byte; kind = exe}
|}]
test "native"
[%%expect{|
- : Jbuild.Executables.Link_mode.t = {mode = native; kind = exe}
|}]

(* Jbuild.Executables.Link_mode.sexp_of_t *)
let test l =
  Jbuild.Executables.Link_mode.sexp_of_t l
[%%expect{|
val test : Jbuild.Executables.Link_mode.t -> Usexp.t = <fun>
|}]

(* In the general case, modes are serialized as a list *)
test {Jbuild.Executables.Link_mode.kind = Shared_object; mode = Byte }
[%%expect{|
- : Usexp.t = (byte shared_object)
|}]

(* But the specialized ones are serialized in the minimal version *)
test Jbuild.Executables.Link_mode.exe
[%%expect{|
- : Usexp.t = exe
|}]
