(* -*- tuareg -*- *)

open Stdune;;

type mynode = {
  name : string;
}

module Dag = struct
  include Dag.Make(struct
      type t = mynode
    end)

  let node dag data =
    { info = create_node_info dag; data }
end
[%%expect{|
type mynode = { name : string; }
module Dag :
  sig
    type t
    type node_info
    type node = { data : mynode; info : node_info; }
    exception Cycle of node list
    val create : unit -> t
    val create_node_info : t -> node_info
    val add : t -> node -> node -> unit
    val children : node -> node list
    val pp_node : mynode Fmt.t -> node Fmt.t
    val delta : t -> int
    val is_child : node -> node -> bool
    val node : t -> mynode -> node
  end
|}]

open Dag

let dag = Dag.create ();;

let node = Dag.node dag { name = "root" };;
let node11 = Dag.node dag { name = "child 1 1" };;
let node12 = Dag.node dag { name = "child 1 2" };;
let node21 = Dag.node dag { name = "child 2 1" };;
let node31 = Dag.node dag { name = "child 3 1" };;

Dag.add dag node node11;;
Dag.add dag node node12;;
Dag.add dag node12 node21;;
Dag.add dag node21 node31;;

let pp_mynode fmt n =
  Format.fprintf fmt "%s" n.name;;
let dag_pp_mynode = (Dag.pp_node pp_mynode);;

#install_printer dag_pp_mynode;;

node;;

let node41 = Dag.node dag { name = "child 4 1" };;

Dag.add dag node31 node41;;

node;;
Dag.delta dag;;

let name node = node.data.name in
try
  Dag.add dag node41 node;
  None
with
  | Dag.Cycle cycle ->
    let cycle = List.map cycle ~f:name in
    Some cycle;;
node;;

(* node;; *)

[%%expect{|
val dag : t = <abstr>
val node : node = {data = {name = "root"}; info = <abstr>}
val node11 : node = {data = {name = "child 1 1"}; info = <abstr>}
val node12 : node = {data = {name = "child 1 2"}; info = <abstr>}
val node21 : node = {data = {name = "child 2 1"}; info = <abstr>}
val node31 : node = {data = {name = "child 3 1"}; info = <abstr>}
- : unit = ()
- : unit = ()
- : unit = ()
- : unit = ()
val pp_mynode : Format.formatter -> mynode -> unit = <fun>
val dag_pp_mynode : node Fmt.t = <fun>
- : node =
(1: k=1, i=-6) (root) [(3: k=1, i=-3) (child 1 2) [(4: k=2, i=-9) (child 2 1) [
                                                   (5: k=2, i=-8) (child 3 1) [
                                                   ]]];
                        (2: k=1, i=-2) (child 1 1) []]
val node41 : node = (6: k=1, i=-10) (child 4 1) []
- : unit = ()
- : node =
(1: k=1, i=-6) (root) [(3: k=1, i=-3) (child 1 2) [(4: k=2, i=-13) (child 2 1) [
                                                   (5: k=2, i=-12) (child 3 1) [
                                                   (6: k=2, i=-11) (child 4 1) [
                                                   ]]]];
                        (2: k=1, i=-2) (child 1 1) []]
- : int = 2
- : string list option =
Some
 ["child 4 1"; "child 3 1"; "child 2 1"; "child 1 2"; "root"; "child 4 1"]
- : node =
(1: k=3, i=-6) (root) [(3: k=3, i=-3) (child 1 2) [(4: k=3, i=-13) (child 2 1) [
                                                   (5: k=3, i=-12) (child 3 1) [
                                                   (6: k=2, i=-11) (child 4 1) [
                                                   ]]]];
                        (2: k=1, i=-2) (child 1 1) []]
|}]
