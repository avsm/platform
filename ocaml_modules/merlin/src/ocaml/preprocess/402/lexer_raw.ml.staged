# 15 "src/ocaml/preprocess/402/lexer_raw.mll"
 
open Std
open Misc
open Lexing
open Parser_raw

type keywords = (string, Parser_raw.token) Hashtbl.t

type error =
  | Illegal_character of char
  | Illegal_escape of string
  | Unterminated_comment of Location.t
  | Unterminated_string
  | Unterminated_string_in_comment of Location.t * Location.t
  | Keyword_as_label of string
  | Literal_overflow of string

exception Error of error * Location.t

(* Monad in which the lexer evaluates *)
type 'a result =
  | Return of 'a
  | Refill of (unit -> 'a result)
  | Fail of error * Location.t

let return a = Return a

let fail e l = Fail (e,l)

let rec (>>=) (m : 'a result) (f : 'a -> 'b result) : 'b result =
  match m with
  | Return a -> f a
  | Refill u ->
    Refill (fun () -> u () >>= f)
  | Fail _ as e -> e

type preprocessor = (Lexing.lexbuf -> Parser_raw.token) -> Lexing.lexbuf -> Parser_raw.token

type state = {
  keywords: keywords;
  mutable buffer: Buffer.t;
  mutable string_start_loc: Location.t;
  mutable comment_start_loc: Location.t list;
  mutable preprocessor: preprocessor option;
}

let make ?preprocessor keywords = {
  keywords;
  buffer = Buffer.create 17;
  string_start_loc = Location.none;
  comment_start_loc = [];
  preprocessor;
}

let lABEL m = m >>= fun v -> return (LABEL v)
let oPTLABEL m = m >>= fun v -> return (OPTLABEL v)

let rec catch m f = match m with
  | Fail (e,l) -> f e l
  | Refill next -> Refill (fun () -> catch (next ()) f)
  | Return _ -> m

(* The table of keywords *)

let keyword_table : keywords =
  create_hashtable 149 [
    "and", AND;
    "as", AS;
    "assert", ASSERT;
    "begin", BEGIN;
    "class", CLASS;
    "constraint", CONSTRAINT;
    "do", DO;
    "done", DONE;
    "downto", DOWNTO;
    "else", ELSE;
    "end", END;
    "exception", EXCEPTION;
    "external", EXTERNAL;
    "false", FALSE;
    "for", FOR;
    "fun", FUN;
    "function", FUNCTION;
    "functor", FUNCTOR;
    "if", IF;
    "in", IN;
    "include", INCLUDE;
    "inherit", INHERIT;
    "initializer", INITIALIZER;
    "lazy", LAZY;
    "let", LET;
    "match", MATCH;
    "method", METHOD;
    "module", MODULE;
    "mutable", MUTABLE;
    "new", NEW;
    "nonrec", NONREC;
    "object", OBJECT;
    "of", OF;
    "open", OPEN;
    "or", OR;
(*  "parser", PARSER; *)
    "private", PRIVATE;
    "rec", REC;
    "sig", SIG;
    "struct", STRUCT;
    "then", THEN;
    "to", TO;
    "true", TRUE;
    "try", TRY;
    "type", TYPE;
    "val", VAL;
    "virtual", VIRTUAL;
    "when", WHEN;
    "while", WHILE;
    "with", WITH;

    "mod", INFIXOP3("mod");
    "land", INFIXOP3("land");
    "lor", INFIXOP3("lor");
    "lxor", INFIXOP3("lxor");
    "lsl", INFIXOP4("lsl");
    "lsr", INFIXOP4("lsr");
    "asr", INFIXOP4("asr");
]

let keywords l = create_hashtable 11 l

(* To store the position of the beginning of a string and comment *)
let in_comment state = state.comment_start_loc <> []

(* To translate escape sequences *)

let char_for_backslash = function
  | 'n' -> '\010'
  | 'r' -> '\013'
  | 'b' -> '\008'
  | 't' -> '\009'
  | c   -> c

let char_for_decimal_code state lexbuf i =
  let c = 100 * (Char.code(Lexing.lexeme_char lexbuf i) - 48) +
           10 * (Char.code(Lexing.lexeme_char lexbuf (i+1)) - 48) +
                (Char.code(Lexing.lexeme_char lexbuf (i+2)) - 48) in
  if (c < 0 || c > 255) then
    if in_comment state
    then return 'x'
    else fail (Illegal_escape (Lexing.lexeme lexbuf))
               (Location.curr lexbuf)
  else return (Char.chr c)

let char_for_hexadecimal_code lexbuf i =
  let d1 = Char.code (Lexing.lexeme_char lexbuf i) in
  let val1 = if d1 >= 97 then d1 - 87
             else if d1 >= 65 then d1 - 55
             else d1 - 48
  in
  let d2 = Char.code (Lexing.lexeme_char lexbuf (i+1)) in
  let val2 = if d2 >= 97 then d2 - 87
             else if d2 >= 65 then d2 - 55
             else d2 - 48
  in
  Char.chr (val1 * 16 + val2)

(* To convert integer literals, allowing max_int + 1 (PR#4210) *)

let cvt_int_literal s =
  - int_of_string ("-" ^ s)
let cvt_int32_literal s =
  Int32.neg (Int32.of_string ("-" ^ String.sub s ~pos:0 ~len:(String.length s - 1)))
let cvt_int64_literal s =
  Int64.neg (Int64.of_string ("-" ^ String.sub s ~pos:0 ~len:(String.length s - 1)))
let cvt_nativeint_literal s =
  Nativeint.neg (Nativeint.of_string ("-" ^ String.sub s ~pos:0
                                                       ~len:(String.length s - 1)))

let keyword_or state s default =
  try Hashtbl.find state.keywords s
  with Not_found -> try Hashtbl.find keyword_table s
  with Not_found -> default

(* Remove underscores from float literals *)

let remove_underscores s =
  let l = Bytes.length s in
  let rec remove src dst =
    if src >= l then
      if dst >= l then s else Bytes.sub s 0 dst
    else
      match s.[src] with
        '_' -> remove (src + 1) dst
      |  c  -> Bytes.set s dst c; remove (src + 1) (dst + 1)
  in remove 0 0

(* recover the name from a LABEL or OPTLABEL token *)

let get_label_name lexbuf =
  let s = Lexing.lexeme lexbuf in
  let name = String.sub s ~pos:1 ~len:(String.length s - 2) in
  if Hashtbl.mem keyword_table name then
    fail (Keyword_as_label name) (Location.curr lexbuf)
  else
    return name
;;

(* Update the current location with file name and line number. *)

let update_loc lexbuf _file line absolute chars =
  let pos = lexbuf.lex_curr_p in
  let new_file = pos.pos_fname
    (*match file with
      | None -> pos.pos_fname
      | Some s -> s*)
  in
  lexbuf.lex_curr_p <- { pos with
    pos_fname = new_file;
    pos_lnum = if absolute then line else pos.pos_lnum + line;
    pos_bol = pos.pos_cnum - chars;
  }
;;

(* Warn about Latin-1 characters used in idents *)

let warn_latin1 lexbuf =
  Location.prerr_warning (Location.curr lexbuf)
    (Warnings.Deprecated "ISO-Latin1 characters in identifiers")
;;

(* Error report *)

open Format

let report_error ppf = function
  | Illegal_character c ->
      fprintf ppf "Illegal character (%s)" (Char.escaped c)
  | Illegal_escape s ->
      fprintf ppf "Illegal backslash escape in string or character (%s)" s
  | Unterminated_comment _ ->
      fprintf ppf "Comment not terminated"
  | Unterminated_string ->
      fprintf ppf "String literal not terminated"
  | Unterminated_string_in_comment (_, loc) ->
      fprintf ppf "This comment contains an unterminated string literal@.\
                   %aString literal begins here"
              Location.print_error loc
  | Keyword_as_label kwd ->
      fprintf ppf "`%s' is a keyword, it cannot be used as label name" kwd
  | Literal_overflow ty ->
      fprintf ppf "Integer literal exceeds the range of representable \
                   integers of type %s" ty

let () =
  Location.register_error_of_exn
    (function
      | Error (err, loc) ->
        let source = Location.Lexer in
        Some (Location.error_of_printer ~source loc report_error err)
      | _ ->
        None
    )


# 265 "src/ocaml/preprocess/402/lexer_raw.ml"
let __ocaml_lex_refill : (Lexing.lexbuf -> 'a) -> (Lexing.lexbuf -> 'a) =
# 306 "src/ocaml/preprocess/402/lexer_raw.mll"
       (fun k lexbuf -> Refill (fun () -> k lexbuf))
# 269 "src/ocaml/preprocess/402/lexer_raw.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\162\255\163\255\094\000\153\000\224\000\003\001\038\001\
    \073\001\188\255\108\001\196\255\141\000\145\001\180\001\069\000\
    \084\000\215\001\213\255\215\255\218\255\250\001\089\002\124\002\
    \087\000\012\001\154\002\233\255\231\002\008\003\129\003\001\004\
    \135\004\007\005\049\005\016\006\016\007\141\005\133\000\135\000\
    \254\255\001\000\005\000\255\255\006\000\007\000\210\255\250\255\
    \252\255\187\255\189\255\108\006\053\007\182\007\054\008\247\255\
    \246\255\091\008\220\008\092\009\244\255\243\255\226\009\098\010\
    \135\010\234\255\235\255\236\255\120\000\011\002\085\000\004\001\
    \124\002\129\003\001\004\111\000\021\002\147\002\194\255\232\255\
    \079\006\196\010\096\000\099\000\011\000\231\255\230\255\226\255\
    \018\004\179\002\104\000\229\255\189\002\109\000\228\255\135\004\
    \110\000\227\255\109\000\224\255\229\010\223\255\026\011\070\005\
    \198\004\222\255\012\000\016\000\034\001\115\001\017\000\222\255\
    \018\000\067\011\111\011\152\011\187\011\206\255\207\255\208\255\
    \204\255\222\011\114\000\089\000\197\255\198\255\199\255\097\000\
    \182\255\184\255\191\255\001\012\036\012\071\012\106\012\141\012\
    \081\003\243\255\244\255\170\000\245\255\104\001\109\006\253\255\
    \121\000\122\000\255\255\254\255\252\255\051\007\159\012\127\000\
    \142\000\172\000\251\255\250\255\249\255\141\005\241\002\145\000\
    \248\255\158\003\153\000\247\255\182\007\155\000\246\255\194\000\
    \129\001\247\255\248\255\249\255\199\000\232\012\255\255\250\255\
    \220\008\192\003\253\255\003\001\014\001\024\001\050\004\252\255\
    \092\009\251\255\059\001\095\001\252\255\243\005\254\255\255\255\
    \060\001\069\001\253\255\089\008\162\000\169\000\198\000\200\000\
    \189\000\254\000\223\000\013\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\088\000\087\000\084\000\083\000\076\000\
    \074\000\255\255\062\000\255\255\055\000\054\000\052\000\050\000\
    \046\000\079\000\255\255\255\255\255\255\035\000\034\000\041\000\
    \039\000\038\000\060\000\255\255\017\000\017\000\016\000\015\000\
    \014\000\014\000\010\000\007\000\006\000\065\000\044\000\002\000\
    \255\255\093\000\093\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\082\000\255\255\255\255\255\255\
    \255\255\013\000\255\255\255\255\255\255\255\255\014\000\014\000\
    \090\000\255\255\255\255\255\255\255\255\018\000\255\255\255\255\
    \255\255\017\000\017\000\017\000\018\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \029\000\029\000\029\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\030\000\255\255\086\000\255\255\089\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\036\000\085\000\080\000\043\000\255\255\255\255\255\255\
    \255\255\053\000\070\000\069\000\255\255\255\255\255\255\072\000\
    \255\255\255\255\255\255\063\000\081\000\075\000\078\000\077\000\
    \255\255\255\255\255\255\012\000\255\255\012\000\012\000\255\255\
    \012\000\012\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\008\000\008\000\255\255\255\255\
    \005\000\005\000\255\255\001\000\005\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\255\255\255\255\
    \003\000\255\255\255\255\255\255\002\000\255\255\255\255\001\000\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\082\000\255\255\000\000\255\255\255\255\030\000\031\000\
    \032\000\032\000\255\255\255\255\032\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\053\000\054\000\000\000\
    \000\000\255\255\058\000\059\000\000\000\000\000\032\000\032\000\
    \255\255\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\087\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\000\000\255\255\107\000\
    \255\255\000\000\255\255\107\000\108\000\107\000\110\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \137\000\000\000\000\000\255\255\000\000\151\000\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \169\000\000\000\000\000\000\000\255\255\175\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\255\255\188\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\198\000\201\000\
    \255\255\201\000\255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\039\000\040\000\040\000\039\000\041\000\045\000\043\000\
    \043\000\040\000\044\000\044\000\045\000\083\000\105\000\204\000\
    \084\000\106\000\105\000\111\000\111\000\106\000\112\000\112\000\
    \039\000\008\000\027\000\022\000\006\000\004\000\021\000\025\000\
    \024\000\019\000\023\000\007\000\018\000\017\000\038\000\003\000\
    \029\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\016\000\015\000\014\000\013\000\037\000\034\000\
    \005\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\012\000\042\000\011\000\005\000\036\000\
    \020\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\033\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\026\000\010\000\009\000\035\000\003\000\
    \120\000\098\000\003\000\003\000\003\000\075\000\075\000\086\000\
    \003\000\003\000\085\000\003\000\003\000\003\000\119\000\091\000\
    \039\000\118\000\117\000\039\000\094\000\097\000\099\000\129\000\
    \003\000\127\000\003\000\003\000\003\000\003\000\003\000\075\000\
    \075\000\128\000\147\000\077\000\146\000\077\000\156\000\039\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\122\000\046\000\138\000\155\000\152\000\167\000\
    \160\000\153\000\003\000\066\000\003\000\003\000\003\000\003\000\
    \163\000\048\000\166\000\003\000\003\000\197\000\003\000\003\000\
    \003\000\125\000\198\000\124\000\138\000\123\000\075\000\167\000\
    \199\000\171\000\200\000\003\000\186\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\067\000\003\000\065\000\202\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\003\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \002\000\005\000\203\000\047\000\005\000\005\000\005\000\000\000\
    \200\000\126\000\005\000\005\000\179\000\005\000\005\000\005\000\
    \255\255\255\255\000\000\000\000\000\000\003\000\083\000\003\000\
    \179\000\084\000\005\000\181\000\005\000\005\000\005\000\005\000\
    \005\000\000\000\179\000\179\000\006\000\181\000\000\000\006\000\
    \006\000\006\000\000\000\000\000\105\000\006\000\006\000\106\000\
    \006\000\006\000\006\000\255\255\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\000\000\006\000\005\000\006\000\
    \006\000\006\000\006\000\006\000\110\000\171\000\191\000\114\000\
    \186\000\193\000\114\000\114\000\114\000\000\000\000\000\191\000\
    \114\000\114\000\193\000\114\000\135\000\114\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\005\000\000\000\005\000\000\000\
    \114\000\006\000\114\000\134\000\114\000\114\000\114\000\000\000\
    \081\000\191\000\132\000\000\000\192\000\132\000\132\000\132\000\
    \000\000\000\000\152\000\132\000\132\000\153\000\132\000\132\000\
    \132\000\000\000\000\000\000\000\109\000\105\000\000\000\006\000\
    \106\000\006\000\000\000\132\000\114\000\132\000\133\000\132\000\
    \132\000\132\000\000\000\171\000\000\000\006\000\172\000\154\000\
    \006\000\006\000\006\000\109\000\000\000\108\000\006\000\006\000\
    \000\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\114\000\174\000\114\000\000\000\006\000\132\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \000\000\000\000\006\000\000\000\000\000\006\000\006\000\006\000\
    \000\000\000\000\000\000\006\000\006\000\000\000\006\000\006\000\
    \006\000\000\000\000\000\000\000\150\000\132\000\255\255\132\000\
    \255\255\130\000\006\000\006\000\000\000\006\000\006\000\006\000\
    \006\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\
    \006\000\006\000\006\000\189\000\000\000\173\000\006\000\006\000\
    \000\000\121\000\006\000\006\000\000\000\000\000\000\000\000\000\
    \131\000\000\000\006\000\000\000\000\000\000\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \114\000\000\000\000\000\114\000\114\000\114\000\255\255\000\000\
    \000\000\114\000\114\000\000\000\114\000\115\000\114\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\006\000\000\000\006\000\
    \000\000\114\000\006\000\114\000\114\000\116\000\114\000\114\000\
    \000\000\000\000\000\000\006\000\000\000\000\000\006\000\006\000\
    \113\000\000\000\255\255\000\000\006\000\006\000\000\000\006\000\
    \006\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \006\000\000\000\006\000\000\000\006\000\114\000\006\000\006\000\
    \006\000\006\000\006\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\000\000\
    \068\000\000\000\000\000\114\000\000\000\114\000\000\000\000\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\190\000\
    \000\000\000\000\104\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\069\000\000\000\000\000\000\000\000\000\000\000\
    \068\000\000\000\000\000\255\255\076\000\000\000\006\000\000\000\
    \006\000\104\000\102\000\000\000\102\000\102\000\102\000\102\000\
    \000\000\170\000\000\000\102\000\102\000\000\000\102\000\102\000\
    \102\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \103\000\103\000\103\000\102\000\000\000\102\000\102\000\102\000\
    \102\000\102\000\000\000\000\000\000\000\003\000\000\000\000\000\
    \003\000\003\000\003\000\000\000\000\000\101\000\100\000\003\000\
    \000\000\003\000\003\000\003\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\003\000\102\000\
    \003\000\003\000\003\000\003\000\003\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\102\000\078\000\102\000\
    \000\000\000\000\003\000\000\000\000\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\000\000\
    \003\000\080\000\003\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\069\000\079\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\
    \161\000\161\000\161\000\000\000\068\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\066\000\000\000\000\000\069\000\000\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\000\000\000\000\000\000\000\000\028\000\000\000\
    \000\000\000\000\070\000\000\000\068\000\068\000\000\000\000\000\
    \000\000\000\000\000\000\067\000\066\000\065\000\000\000\071\000\
    \000\000\000\000\000\000\138\000\000\000\000\000\139\000\000\000\
    \072\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
    \000\000\000\000\070\000\000\000\000\000\068\000\000\000\000\000\
    \000\000\000\000\000\000\143\000\067\000\000\000\065\000\071\000\
    \141\000\145\000\000\000\144\000\000\000\000\000\000\000\000\000\
    \072\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\073\000\073\000\073\000\073\000\073\000\073\000\
    \000\000\000\000\000\000\000\000\142\000\066\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \073\000\255\255\073\000\073\000\073\000\073\000\073\000\073\000\
    \000\000\000\000\000\000\000\000\000\000\067\000\000\000\065\000\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\182\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\095\000\000\000\066\000\000\000\000\000\
    \000\000\140\000\000\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \074\000\255\255\183\000\183\000\183\000\183\000\183\000\183\000\
    \183\000\183\000\183\000\183\000\000\000\067\000\000\000\065\000\
    \000\000\000\000\000\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \096\000\096\000\096\000\096\000\096\000\096\000\000\000\104\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\104\000\255\255\
    \096\000\096\000\096\000\096\000\096\000\096\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\103\000\103\000\
    \103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\109\000\
    \105\000\000\000\052\000\106\000\000\000\052\000\052\000\052\000\
    \000\000\000\000\000\000\052\000\052\000\000\000\052\000\052\000\
    \052\000\000\000\255\255\255\255\255\255\255\255\109\000\255\255\
    \108\000\000\000\000\000\052\000\062\000\052\000\052\000\052\000\
    \057\000\052\000\000\000\000\000\000\000\000\000\103\000\103\000\
    \103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
    \059\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\000\000\052\000\006\000\052\000\
    \000\000\006\000\006\000\006\000\000\000\000\000\000\000\006\000\
    \006\000\000\000\006\000\051\000\006\000\164\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\006\000\
    \000\000\006\000\006\000\006\000\006\000\006\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\050\000\006\000\000\000\000\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\006\000\049\000\006\000\000\000\000\000\000\000\000\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \000\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\052\000\000\000\000\000\052\000\052\000\052\000\000\000\
    \000\000\000\000\052\000\052\000\000\000\052\000\052\000\052\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\052\000\000\000\052\000\052\000\052\000\052\000\
    \052\000\000\000\195\000\000\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\195\000\195\000\052\000\054\000\
    \194\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\000\000\052\000\006\000\052\000\000\000\
    \006\000\006\000\006\000\000\000\000\000\000\000\006\000\006\000\
    \000\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\080\000\000\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\006\000\079\000\149\000\000\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \006\000\148\000\006\000\000\000\000\000\000\000\000\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\000\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
    \000\000\052\000\052\000\052\000\000\000\000\000\000\000\052\000\
    \052\000\000\000\052\000\052\000\052\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\052\000\
    \255\255\052\000\052\000\052\000\052\000\052\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\149\000\052\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\000\000\148\000\
    \000\000\052\000\000\000\052\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \056\000\255\255\255\255\255\255\255\255\255\255\255\255\165\000\
    \165\000\165\000\165\000\165\000\165\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\165\000\
    \165\000\165\000\165\000\165\000\165\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \055\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\052\000\000\000\000\000\052\000\
    \052\000\052\000\000\000\000\000\000\000\052\000\052\000\000\000\
    \052\000\052\000\052\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\052\000\255\255\052\000\
    \052\000\052\000\052\000\052\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \195\000\052\000\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\000\000\000\000\194\000\052\000\
    \000\000\052\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\184\000\184\000\184\000\184\000\
    \184\000\184\000\184\000\184\000\184\000\184\000\061\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\184\000\184\000\184\000\
    \184\000\184\000\184\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\184\000\184\000\184\000\
    \184\000\184\000\184\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\060\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\185\000\185\000\185\000\
    \185\000\185\000\185\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\185\000\185\000\185\000\
    \185\000\185\000\185\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\064\000\255\255\255\255\064\000\255\255\
    \064\000\000\000\255\255\255\255\064\000\064\000\255\255\064\000\
    \064\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\064\000\255\255\064\000\064\000\
    \064\000\064\000\064\000\000\000\000\000\000\000\000\000\000\000\
    \064\000\000\000\000\000\064\000\064\000\064\000\000\000\000\000\
    \000\000\064\000\064\000\000\000\064\000\064\000\064\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \064\000\064\000\255\255\064\000\064\000\064\000\064\000\064\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\064\000\255\255\
    \064\000\255\255\255\255\000\000\090\000\064\000\090\000\000\000\
    \000\000\000\000\000\000\090\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\000\000\000\000\
    \000\000\000\000\000\000\064\000\000\000\064\000\100\000\000\000\
    \000\000\100\000\100\000\100\000\000\000\000\000\000\000\100\000\
    \100\000\000\000\100\000\100\000\100\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\
    \090\000\100\000\100\000\100\000\100\000\100\000\090\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\090\000\000\000\000\000\000\000\090\000\000\000\
    \090\000\000\000\000\000\102\000\088\000\102\000\102\000\102\000\
    \102\000\000\000\000\000\100\000\102\000\102\000\000\000\102\000\
    \102\000\102\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\102\000\000\000\102\000\102\000\
    \102\000\102\000\102\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\100\000\255\255\100\000\006\000\000\000\000\000\006\000\
    \006\000\006\000\000\000\000\000\000\000\006\000\006\000\000\000\
    \006\000\006\000\006\000\000\000\000\000\000\000\000\000\000\000\
    \102\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \114\000\000\000\000\000\114\000\114\000\114\000\102\000\000\000\
    \102\000\114\000\114\000\000\000\114\000\114\000\114\000\000\000\
    \000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\114\000\000\000\114\000\114\000\114\000\114\000\114\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\114\000\000\000\000\000\114\000\114\000\114\000\006\000\
    \000\000\006\000\114\000\114\000\255\255\114\000\114\000\114\000\
    \000\000\000\000\000\000\000\000\000\000\114\000\000\000\000\000\
    \000\000\000\000\114\000\000\000\114\000\114\000\114\000\114\000\
    \114\000\000\000\000\000\000\000\114\000\000\000\000\000\114\000\
    \114\000\114\000\000\000\000\000\000\000\114\000\114\000\000\000\
    \114\000\114\000\114\000\114\000\000\000\114\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\000\000\000\000\000\000\006\000\
    \000\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \006\000\006\000\000\000\006\000\006\000\006\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\114\000\000\000\114\000\000\000\
    \006\000\114\000\006\000\006\000\006\000\006\000\006\000\000\000\
    \000\000\000\000\006\000\000\000\000\000\006\000\006\000\006\000\
    \000\000\000\000\000\000\006\000\006\000\000\000\006\000\006\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\114\000\
    \000\000\114\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\000\000\000\000\000\000\132\000\000\000\000\000\
    \132\000\132\000\132\000\000\000\000\000\000\000\132\000\132\000\
    \000\000\132\000\132\000\132\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\006\000\000\000\006\000\000\000\132\000\006\000\
    \132\000\132\000\132\000\132\000\132\000\000\000\000\000\000\000\
    \132\000\000\000\000\000\132\000\132\000\132\000\000\000\000\000\
    \000\000\132\000\132\000\000\000\132\000\132\000\132\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000\
    \000\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \000\000\000\000\000\000\114\000\000\000\000\000\114\000\114\000\
    \114\000\000\000\000\000\000\000\114\000\114\000\000\000\114\000\
    \114\000\114\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \132\000\000\000\132\000\000\000\114\000\132\000\114\000\114\000\
    \114\000\114\000\114\000\000\000\000\000\000\000\114\000\000\000\
    \000\000\114\000\114\000\114\000\000\000\000\000\000\000\114\000\
    \114\000\000\000\114\000\114\000\114\000\000\000\000\000\159\000\
    \000\000\159\000\000\000\132\000\000\000\132\000\159\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\000\000\158\000\
    \158\000\158\000\158\000\158\000\158\000\158\000\158\000\158\000\
    \158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\114\000\000\000\
    \114\000\000\000\000\000\114\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\179\000\000\000\000\000\180\000\000\000\000\000\
    \000\000\000\000\000\000\159\000\000\000\000\000\000\000\000\000\
    \000\000\159\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \178\000\114\000\178\000\114\000\000\000\159\000\000\000\178\000\
    \000\000\159\000\000\000\159\000\000\000\000\000\000\000\157\000\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\177\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\178\000\000\000\000\000\000\000\
    \000\000\000\000\178\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\178\000\000\000\
    \000\000\000\000\178\000\000\000\178\000\000\000\000\000\000\000\
    \176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\041\000\000\000\000\000\041\000\042\000\
    \044\000\045\000\042\000\044\000\045\000\084\000\106\000\203\000\
    \084\000\106\000\107\000\110\000\112\000\107\000\110\000\112\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \015\000\024\000\003\000\003\000\003\000\070\000\070\000\082\000\
    \003\000\003\000\083\000\003\000\003\000\003\000\016\000\090\000\
    \039\000\016\000\016\000\039\000\093\000\096\000\098\000\122\000\
    \003\000\123\000\003\000\003\000\003\000\003\000\003\000\075\000\
    \075\000\127\000\144\000\068\000\145\000\068\000\151\000\039\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\012\000\038\000\139\000\152\000\153\000\139\000\
    \159\000\153\000\004\000\075\000\003\000\004\000\004\000\004\000\
    \162\000\038\000\165\000\004\000\004\000\196\000\004\000\004\000\
    \004\000\012\000\197\000\012\000\167\000\012\000\075\000\167\000\
    \198\000\172\000\199\000\004\000\172\000\004\000\004\000\004\000\
    \004\000\004\000\003\000\075\000\003\000\075\000\200\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\202\000\038\000\005\000\005\000\005\000\255\255\
    \201\000\012\000\005\000\005\000\179\000\005\000\005\000\005\000\
    \107\000\110\000\255\255\255\255\255\255\004\000\025\000\004\000\
    \180\000\025\000\005\000\180\000\005\000\005\000\005\000\005\000\
    \005\000\255\255\181\000\179\000\006\000\181\000\255\255\006\000\
    \006\000\006\000\255\255\255\255\108\000\006\000\006\000\108\000\
    \006\000\006\000\006\000\025\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\255\255\006\000\005\000\006\000\
    \006\000\006\000\006\000\006\000\108\000\186\000\192\000\007\000\
    \186\000\192\000\007\000\007\000\007\000\255\255\255\255\193\000\
    \007\000\007\000\193\000\007\000\007\000\007\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000\255\255\005\000\255\255\
    \007\000\006\000\007\000\007\000\007\000\007\000\007\000\255\255\
    \025\000\187\000\008\000\255\255\187\000\008\000\008\000\008\000\
    \255\255\255\255\141\000\008\000\008\000\141\000\008\000\008\000\
    \008\000\255\255\255\255\255\255\109\000\109\000\255\255\006\000\
    \109\000\006\000\255\255\008\000\007\000\008\000\008\000\008\000\
    \008\000\008\000\255\255\168\000\255\255\010\000\168\000\141\000\
    \010\000\010\000\010\000\109\000\255\255\109\000\010\000\010\000\
    \255\255\010\000\010\000\010\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\007\000\168\000\007\000\255\255\010\000\008\000\
    \010\000\010\000\010\000\010\000\010\000\255\255\255\255\255\255\
    \255\255\255\255\013\000\255\255\255\255\013\000\013\000\013\000\
    \255\255\255\255\255\255\013\000\013\000\255\255\013\000\013\000\
    \013\000\255\255\255\255\255\255\141\000\008\000\198\000\008\000\
    \199\000\010\000\010\000\013\000\255\255\013\000\013\000\013\000\
    \013\000\013\000\255\255\255\255\255\255\014\000\255\255\255\255\
    \014\000\014\000\014\000\187\000\255\255\168\000\014\000\014\000\
    \255\255\014\000\014\000\014\000\255\255\255\255\255\255\255\255\
    \010\000\255\255\010\000\255\255\255\255\255\255\014\000\013\000\
    \014\000\014\000\014\000\014\000\014\000\255\255\255\255\255\255\
    \017\000\255\255\255\255\017\000\017\000\017\000\201\000\255\255\
    \255\255\017\000\017\000\255\255\017\000\017\000\017\000\255\255\
    \255\255\255\255\255\255\255\255\025\000\013\000\255\255\013\000\
    \255\255\017\000\014\000\017\000\017\000\017\000\017\000\017\000\
    \255\255\255\255\255\255\021\000\255\255\255\255\021\000\021\000\
    \021\000\255\255\108\000\255\255\021\000\021\000\255\255\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \014\000\255\255\014\000\255\255\021\000\017\000\021\000\021\000\
    \021\000\021\000\021\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\255\255\
    \069\000\255\255\255\255\017\000\255\255\017\000\255\255\255\255\
    \021\000\255\255\255\255\255\255\255\255\255\255\255\255\187\000\
    \255\255\255\255\022\000\255\255\255\255\255\255\255\255\255\255\
    \141\000\255\255\069\000\255\255\255\255\255\255\255\255\255\255\
    \069\000\255\255\255\255\109\000\076\000\255\255\021\000\255\255\
    \021\000\022\000\022\000\255\255\022\000\022\000\022\000\022\000\
    \255\255\168\000\255\255\022\000\022\000\255\255\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\255\255\022\000\022\000\022\000\
    \022\000\022\000\255\255\255\255\255\255\023\000\255\255\255\255\
    \023\000\023\000\023\000\255\255\255\255\023\000\023\000\023\000\
    \255\255\023\000\023\000\023\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\023\000\022\000\
    \023\000\023\000\023\000\023\000\023\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\022\000\026\000\022\000\
    \255\255\255\255\023\000\255\255\255\255\072\000\072\000\072\000\
    \072\000\072\000\072\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\255\255\
    \023\000\026\000\023\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\028\000\026\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\158\000\158\000\158\000\158\000\158\000\158\000\158\000\
    \158\000\158\000\158\000\255\255\028\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\028\000\255\255\255\255\029\000\255\255\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\255\255\255\255\255\255\255\255\028\000\255\255\
    \255\255\255\255\029\000\255\255\028\000\029\000\255\255\255\255\
    \255\255\255\255\255\255\028\000\029\000\028\000\255\255\029\000\
    \255\255\255\255\255\255\136\000\255\255\255\255\136\000\255\255\
    \029\000\255\255\255\255\255\255\255\255\255\255\255\255\029\000\
    \255\255\255\255\029\000\255\255\255\255\029\000\255\255\255\255\
    \255\255\255\255\255\255\136\000\029\000\255\255\029\000\029\000\
    \136\000\136\000\255\255\136\000\255\255\255\255\255\255\255\255\
    \029\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \255\255\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \255\255\255\255\255\255\255\255\136\000\073\000\161\000\161\000\
    \161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\
    \255\255\255\255\255\255\255\255\030\000\030\000\030\000\030\000\
    \073\000\030\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \255\255\255\255\255\255\255\255\255\255\073\000\255\255\073\000\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\177\000\255\255\255\255\030\000\030\000\030\000\030\000\
    \030\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \255\255\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\255\255\255\255\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\255\255\074\000\255\255\255\255\
    \255\255\136\000\255\255\088\000\088\000\088\000\088\000\088\000\
    \088\000\255\255\255\255\255\255\031\000\031\000\031\000\031\000\
    \074\000\031\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\182\000\182\000\182\000\255\255\074\000\255\255\074\000\
    \255\255\255\255\255\255\088\000\088\000\088\000\088\000\088\000\
    \088\000\255\255\255\255\255\255\031\000\031\000\031\000\031\000\
    \031\000\030\000\255\255\255\255\255\255\255\255\255\255\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\255\255\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\095\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\255\255\104\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\032\000\032\000\032\000\032\000\104\000\032\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
    \255\255\031\000\032\000\032\000\032\000\032\000\032\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\255\255\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\103\000\
    \103\000\255\255\034\000\103\000\255\255\034\000\034\000\034\000\
    \255\255\255\255\255\255\034\000\034\000\255\255\034\000\034\000\
    \034\000\255\255\033\000\033\000\033\000\033\000\103\000\033\000\
    \103\000\255\255\255\255\034\000\033\000\034\000\034\000\034\000\
    \034\000\034\000\255\255\255\255\255\255\255\255\103\000\103\000\
    \103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \255\255\255\255\033\000\033\000\033\000\033\000\033\000\032\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\000\
    \034\000\255\255\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\255\255\034\000\037\000\034\000\
    \255\255\037\000\037\000\037\000\255\255\255\255\255\255\037\000\
    \037\000\255\255\037\000\037\000\037\000\157\000\157\000\157\000\
    \157\000\157\000\157\000\157\000\157\000\157\000\157\000\037\000\
    \255\255\037\000\037\000\037\000\037\000\037\000\157\000\157\000\
    \157\000\157\000\157\000\157\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\037\000\037\000\255\255\255\255\157\000\157\000\
    \157\000\157\000\157\000\157\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\000\
    \255\255\037\000\037\000\037\000\255\255\255\255\255\255\255\255\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \255\255\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\035\000\255\255\255\255\035\000\035\000\035\000\255\255\
    \255\255\255\255\035\000\035\000\255\255\035\000\035\000\035\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\103\000\255\255\
    \255\255\255\255\035\000\255\255\035\000\035\000\035\000\035\000\
    \035\000\255\255\189\000\255\255\189\000\189\000\189\000\189\000\
    \189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
    \189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
    \189\000\189\000\189\000\189\000\189\000\189\000\035\000\035\000\
    \189\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\255\255\035\000\051\000\035\000\255\255\
    \051\000\051\000\051\000\255\255\255\255\255\255\051\000\051\000\
    \255\255\051\000\051\000\051\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\051\000\255\255\
    \051\000\051\000\051\000\051\000\051\000\255\255\080\000\255\255\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\051\000\080\000\142\000\255\255\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \051\000\142\000\051\000\255\255\255\255\255\255\255\255\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\255\255\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\255\255\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\255\255\255\255\255\255\255\255\255\255\052\000\255\255\
    \255\255\052\000\052\000\052\000\255\255\255\255\255\255\052\000\
    \052\000\255\255\052\000\052\000\052\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\036\000\036\000\036\000\036\000\052\000\
    \036\000\052\000\052\000\052\000\052\000\052\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\036\000\036\000\036\000\036\000\036\000\
    \255\255\255\255\149\000\052\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\255\255\149\000\
    \255\255\052\000\255\255\052\000\255\255\255\255\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\255\255\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \036\000\053\000\053\000\053\000\053\000\255\255\053\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\053\000\053\000\053\000\053\000\053\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\255\255\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\255\255\
    \255\255\255\255\255\255\255\255\057\000\255\255\255\255\057\000\
    \057\000\057\000\255\255\255\255\255\255\057\000\057\000\255\255\
    \057\000\057\000\057\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\054\000\054\000\054\000\054\000\057\000\054\000\057\000\
    \057\000\057\000\057\000\057\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\054\000\054\000\054\000\054\000\054\000\053\000\255\255\
    \195\000\057\000\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
    \195\000\195\000\195\000\195\000\255\255\255\255\195\000\057\000\
    \255\255\057\000\255\255\255\255\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\255\255\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\176\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\176\000\176\000\176\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\054\000\058\000\
    \058\000\058\000\058\000\255\255\058\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\058\000\
    \058\000\058\000\058\000\058\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\255\255\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\184\000\184\000\184\000\184\000\
    \184\000\184\000\184\000\184\000\184\000\184\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\184\000\184\000\184\000\
    \184\000\184\000\184\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\059\000\
    \059\000\059\000\059\000\255\255\059\000\184\000\184\000\184\000\
    \184\000\184\000\184\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\059\000\
    \059\000\059\000\059\000\059\000\058\000\255\255\255\255\255\255\
    \255\255\255\255\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\255\255\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\062\000\062\000\062\000\
    \062\000\255\255\062\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\062\000\255\255\
    \255\255\255\255\255\255\255\255\059\000\062\000\062\000\062\000\
    \062\000\062\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\255\255\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\255\255\255\255\255\255\255\255\255\255\
    \064\000\255\255\255\255\064\000\064\000\064\000\255\255\255\255\
    \255\255\064\000\064\000\255\255\064\000\064\000\064\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\063\000\063\000\063\000\
    \063\000\064\000\063\000\064\000\064\000\064\000\064\000\064\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\063\000\063\000\063\000\
    \063\000\063\000\062\000\255\255\081\000\064\000\081\000\255\255\
    \255\255\255\255\255\255\081\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\255\255\255\255\
    \255\255\255\255\255\255\064\000\255\255\064\000\100\000\255\255\
    \255\255\100\000\100\000\100\000\255\255\255\255\255\255\100\000\
    \100\000\255\255\100\000\100\000\100\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\100\000\
    \081\000\100\000\100\000\100\000\100\000\100\000\081\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\081\000\255\255\255\255\255\255\081\000\255\255\
    \081\000\255\255\255\255\102\000\081\000\102\000\102\000\102\000\
    \102\000\255\255\255\255\100\000\102\000\102\000\255\255\102\000\
    \102\000\102\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\102\000\255\255\102\000\102\000\
    \102\000\102\000\102\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\100\000\063\000\100\000\113\000\255\255\255\255\113\000\
    \113\000\113\000\255\255\255\255\255\255\113\000\113\000\255\255\
    \113\000\113\000\113\000\255\255\255\255\255\255\255\255\255\255\
    \102\000\255\255\255\255\255\255\255\255\113\000\255\255\113\000\
    \113\000\113\000\113\000\113\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \114\000\255\255\255\255\114\000\114\000\114\000\102\000\255\255\
    \102\000\114\000\114\000\255\255\114\000\114\000\114\000\255\255\
    \255\255\113\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\114\000\255\255\114\000\114\000\114\000\114\000\114\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\115\000\255\255\255\255\115\000\115\000\115\000\113\000\
    \255\255\113\000\115\000\115\000\081\000\115\000\115\000\115\000\
    \255\255\255\255\255\255\255\255\255\255\114\000\255\255\255\255\
    \255\255\255\255\115\000\255\255\115\000\115\000\115\000\115\000\
    \115\000\255\255\255\255\255\255\116\000\255\255\255\255\116\000\
    \116\000\116\000\255\255\255\255\255\255\116\000\116\000\255\255\
    \116\000\116\000\116\000\114\000\255\255\114\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\116\000\115\000\116\000\
    \116\000\116\000\116\000\116\000\255\255\255\255\255\255\121\000\
    \255\255\255\255\121\000\121\000\121\000\255\255\255\255\255\255\
    \121\000\121\000\255\255\121\000\121\000\121\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\115\000\255\255\115\000\255\255\
    \121\000\116\000\121\000\121\000\121\000\121\000\121\000\255\255\
    \255\255\255\255\131\000\255\255\255\255\131\000\131\000\131\000\
    \255\255\255\255\255\255\131\000\131\000\255\255\131\000\131\000\
    \131\000\255\255\255\255\255\255\255\255\255\255\255\255\116\000\
    \255\255\116\000\255\255\131\000\121\000\131\000\131\000\131\000\
    \131\000\131\000\255\255\255\255\255\255\132\000\255\255\255\255\
    \132\000\132\000\132\000\255\255\255\255\255\255\132\000\132\000\
    \255\255\132\000\132\000\132\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\121\000\255\255\121\000\255\255\132\000\131\000\
    \132\000\132\000\132\000\132\000\132\000\255\255\255\255\255\255\
    \133\000\255\255\255\255\133\000\133\000\133\000\255\255\255\255\
    \255\255\133\000\133\000\255\255\133\000\133\000\133\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\131\000\255\255\131\000\
    \255\255\133\000\132\000\133\000\133\000\133\000\133\000\133\000\
    \255\255\255\255\255\255\134\000\255\255\255\255\134\000\134\000\
    \134\000\255\255\255\255\255\255\134\000\134\000\255\255\134\000\
    \134\000\134\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \132\000\255\255\132\000\255\255\134\000\133\000\134\000\134\000\
    \134\000\134\000\134\000\255\255\255\255\255\255\135\000\255\255\
    \255\255\135\000\135\000\135\000\255\255\255\255\255\255\135\000\
    \135\000\255\255\135\000\135\000\135\000\255\255\255\255\150\000\
    \255\255\150\000\255\255\133\000\255\255\133\000\150\000\135\000\
    \134\000\135\000\135\000\135\000\135\000\135\000\255\255\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\134\000\255\255\
    \134\000\255\255\255\255\135\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\173\000\255\255\255\255\173\000\255\255\255\255\
    \255\255\255\255\255\255\150\000\255\255\255\255\255\255\255\255\
    \255\255\150\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \173\000\135\000\173\000\135\000\255\255\150\000\255\255\173\000\
    \255\255\150\000\255\255\150\000\255\255\255\255\255\255\150\000\
    \173\000\173\000\173\000\173\000\173\000\173\000\173\000\173\000\
    \173\000\173\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\173\000\255\255\255\255\255\255\
    \255\255\255\255\173\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\173\000\255\255\
    \255\255\255\255\173\000\255\255\173\000\255\255\255\255\255\255\
    \173\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \173\000";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
    \036\000\012\000\000\000\000\000\000\000\002\000\000\000\027\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\002\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\036\000\036\000\000\000\036\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\001\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\007\000\001\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\001\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\022\000\108\000\173\000\180\000\108\000\181\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \022\000\255\255\108\000\000\000\109\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\103\000\104\000\255\255\255\255\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \103\000\103\000\103\000\103\000\104\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\104\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \108\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_code =
   "\255\004\255\255\005\255\255\007\255\006\255\255\003\255\000\004\
    \001\005\255\007\255\255\006\255\007\255\255\000\004\001\005\003\
    \006\002\007\255\001\255\255\000\001\255";
}

let rec token state lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 8 (-1); __ocaml_lex_token_rec state lexbuf 0
and __ocaml_lex_token_rec state lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 309 "src/ocaml/preprocess/402/lexer_raw.mll"
                 (
      match state.preprocessor with
      | None ->
        fail (Illegal_character (Lexing.lexeme_char lexbuf 0))
              (Location.curr lexbuf)
      | Some _ ->
        update_loc lexbuf None 1 false 0;
        token state lexbuf )
# 1423 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 1 ->
# 318 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( update_loc lexbuf None 1 false 0;
        match state.preprocessor with
        | None -> token state lexbuf
        | Some _ -> return EOL
      )
# 1432 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 2 ->
# 324 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( token state lexbuf )
# 1437 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 3 ->
# 326 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return DOTLESS )
# 1442 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 4 ->
# 328 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return (keyword_or state (Lexing.lexeme lexbuf) (INFIXOP0 ">.")) )
# 1447 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 5 ->
# 330 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return (keyword_or state (Lexing.lexeme lexbuf) DOTTILDE) )
# 1452 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 6 ->
# 332 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return UNDERSCORE )
# 1457 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 7 ->
# 334 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return TILDE )
# 1462 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 8 ->
# 336 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( lABEL (get_label_name lexbuf) )
# 1467 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 9 ->
# 338 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( warn_latin1 lexbuf; lABEL (get_label_name lexbuf) )
# 1472 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 10 ->
# 340 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return QUESTION )
# 1477 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 11 ->
# 342 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( oPTLABEL (get_label_name lexbuf) )
# 1482 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 12 ->
# 344 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( warn_latin1 lexbuf; oPTLABEL (get_label_name lexbuf) )
# 1487 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 13 ->
# 346 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return QUESTIONQUESTION )
# 1492 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 14 ->
# 348 "src/ocaml/preprocess/402/lexer_raw.mll"
    ( let s = Lexing.lexeme lexbuf in
      return (try Hashtbl.find state.keywords s
              with Not_found ->
              try Hashtbl.find keyword_table s
              with Not_found ->
                LIDENT s) )
# 1502 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 15 ->
# 355 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( warn_latin1 lexbuf; return (LIDENT (Lexing.lexeme lexbuf)) )
# 1507 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 16 ->
# 357 "src/ocaml/preprocess/402/lexer_raw.mll"
    ( (* Capitalized keywords for OUnit *)
      let s = Lexing.lexeme lexbuf in
      return (try Hashtbl.find state.keywords s
              with Not_found ->
              try Hashtbl.find keyword_table s
              with Not_found ->
                UIDENT s) )
# 1518 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 17 ->
# 365 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( try
          return (INT (cvt_int_literal (Lexing.lexeme lexbuf)))
        with Failure _ ->
          fail (Literal_overflow "int") (Location.curr lexbuf)
      )
# 1527 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 18 ->
# 371 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return (FLOAT (remove_underscores(Lexing.lexeme lexbuf))) )
# 1532 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 19 ->
# 373 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( try
          return (INT32 (cvt_int32_literal (Lexing.lexeme lexbuf)))
        with Failure _ ->
          fail (Literal_overflow "int32") (Location.curr lexbuf) )
# 1540 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 20 ->
# 378 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( try
          return (INT64 (cvt_int64_literal (Lexing.lexeme lexbuf)))
        with Failure _ ->
          fail (Literal_overflow "int64") (Location.curr lexbuf) )
# 1548 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 21 ->
# 383 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( try
          return (NATIVEINT (cvt_nativeint_literal (Lexing.lexeme lexbuf)))
        with Failure _ ->
          fail (Literal_overflow "nativeint") (Location.curr lexbuf) )
# 1556 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 22 ->
# 388 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.reset state.buffer;
        state.string_start_loc <- Location.curr lexbuf;
        string state lexbuf >>= fun () ->
        lexbuf.lex_start_p <- state.string_start_loc.Location.loc_start;
        state.string_start_loc <- Location.none;
        return (STRING (Buffer.contents state.buffer, None))
      )
# 1567 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 23 ->
# 396 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.reset state.buffer;
        let delim = Lexing.lexeme lexbuf in
        let delim = String.sub delim ~pos:1 ~len:(String.length delim - 2) in
        state.string_start_loc <- Location.curr lexbuf;
        quoted_string state delim lexbuf >>= fun () ->
        lexbuf.lex_start_p <- state.string_start_loc.Location.loc_start;
        state.string_start_loc <- Location.none;
        return (STRING (Buffer.contents state.buffer, Some delim)) )
# 1579 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 24 ->
# 405 "src/ocaml/preprocess/402/lexer_raw.mll"
    ( update_loc lexbuf None 1 false 1;
      return (CHAR (Lexing.lexeme_char lexbuf 1)) )
# 1585 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 25 ->
# 408 "src/ocaml/preprocess/402/lexer_raw.mll"
    ( return (CHAR (Lexing.lexeme_char lexbuf 1)) )
# 1590 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 26 ->
# 410 "src/ocaml/preprocess/402/lexer_raw.mll"
    ( return (CHAR (char_for_backslash (Lexing.lexeme_char lexbuf 2))) )
# 1595 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 27 ->
# 412 "src/ocaml/preprocess/402/lexer_raw.mll"
    ( char_for_decimal_code state lexbuf 2 >>= fun c -> return (CHAR c) )
# 1600 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 28 ->
# 414 "src/ocaml/preprocess/402/lexer_raw.mll"
    ( return (CHAR (char_for_hexadecimal_code lexbuf 3)) )
# 1605 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 29 ->
# 416 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( let l = Lexing.lexeme lexbuf in
        let esc = String.sub l ~pos:1 ~len:(String.length l - 1) in
        fail (Illegal_escape esc) (Location.curr lexbuf)
      )
# 1613 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 30 ->
# 421 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( let start_loc = Location.curr lexbuf in
        state.comment_start_loc <- [start_loc];
        Buffer.reset state.buffer;
        comment state lexbuf >>= fun end_loc ->
        let s = Buffer.contents state.buffer in
        Buffer.reset state.buffer;
        return (COMMENT (s, { start_loc with
                              Location.loc_end = end_loc.Location.loc_end }))
      )
# 1626 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 31 ->
# 431 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( let loc = Location.curr lexbuf in
        Location.prerr_warning loc Warnings.Comment_start;
        state.comment_start_loc <- [loc];
        Buffer.reset state.buffer;
        comment state lexbuf >>= fun end_loc ->
        let s = Buffer.contents state.buffer in
        Buffer.reset state.buffer;
        return (COMMENT (s, { loc with Location.loc_end = end_loc.Location.loc_end }))
      )
# 1639 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 32 ->
# 441 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( let loc = Location.curr lexbuf in
        Location.prerr_warning loc Warnings.Comment_not_end;
        lexbuf.Lexing.lex_curr_pos <- lexbuf.Lexing.lex_curr_pos - 1;
        let curpos = lexbuf.lex_curr_p in
        lexbuf.lex_curr_p <- { curpos with pos_cnum = curpos.pos_cnum - 1 };
        return STAR
      )
# 1650 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 33 ->
let
# 448 "src/ocaml/preprocess/402/lexer_raw.mll"
                                   num
# 1656 "src/ocaml/preprocess/402/lexer_raw.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 449 "src/ocaml/preprocess/402/lexer_raw.mll"
                                           name
# 1661 "src/ocaml/preprocess/402/lexer_raw.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(3) lexbuf.Lexing.lex_mem.(2) in
# 451 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( update_loc lexbuf name (int_of_string num) true 0;
        token state lexbuf
      )
# 1667 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 34 ->
# 454 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return SHARP )
# 1672 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 35 ->
# 455 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return AMPERSAND )
# 1677 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 36 ->
# 456 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return AMPERAMPER )
# 1682 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 37 ->
# 457 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return BACKQUOTE )
# 1687 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 38 ->
# 458 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return QUOTE )
# 1692 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 39 ->
# 459 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LPAREN )
# 1697 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 40 ->
# 460 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return RPAREN )
# 1702 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 41 ->
# 461 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return STAR )
# 1707 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 42 ->
# 462 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return COMMA )
# 1712 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 43 ->
# 463 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return MINUSGREATER )
# 1717 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 44 ->
# 464 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return DOT )
# 1722 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 45 ->
# 465 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return DOTDOT )
# 1727 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 46 ->
# 466 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return COLON )
# 1732 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 47 ->
# 467 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return COLONCOLON )
# 1737 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 48 ->
# 468 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return COLONEQUAL )
# 1742 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 49 ->
# 469 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return COLONGREATER )
# 1747 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 50 ->
# 470 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return SEMI )
# 1752 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 51 ->
# 471 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return SEMISEMI )
# 1757 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 52 ->
# 472 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LESS )
# 1762 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 53 ->
# 473 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LESSMINUS )
# 1767 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 54 ->
# 474 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return EQUAL )
# 1772 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 55 ->
# 475 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LBRACKET )
# 1777 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 56 ->
# 476 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LBRACKETBAR )
# 1782 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 57 ->
# 477 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LBRACKETLESS )
# 1787 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 58 ->
# 478 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LBRACKETGREATER )
# 1792 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 59 ->
# 479 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return RBRACKET )
# 1797 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 60 ->
# 480 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LBRACE )
# 1802 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 61 ->
# 481 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LBRACELESS )
# 1807 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 62 ->
# 482 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return BAR )
# 1812 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 63 ->
# 483 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return BARBAR )
# 1817 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 64 ->
# 484 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return BARRBRACKET )
# 1822 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 65 ->
# 485 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return GREATER )
# 1827 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 66 ->
# 486 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return GREATERRBRACKET )
# 1832 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 67 ->
# 487 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return RBRACE )
# 1837 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 68 ->
# 488 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return GREATERRBRACE )
# 1842 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 69 ->
# 489 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LBRACKETAT )
# 1847 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 70 ->
# 490 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return LBRACKETPERCENT )
# 1852 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 71 ->
# 491 "src/ocaml/preprocess/402/lexer_raw.mll"
          ( return LBRACKETPERCENTPERCENT )
# 1857 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 72 ->
# 492 "src/ocaml/preprocess/402/lexer_raw.mll"
          ( return LBRACKETATAT )
# 1862 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 73 ->
# 493 "src/ocaml/preprocess/402/lexer_raw.mll"
           ( return LBRACKETATATAT )
# 1867 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 74 ->
# 494 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return BANG )
# 1872 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 75 ->
# 495 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return (INFIXOP0 "!=") )
# 1877 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 76 ->
# 496 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return PLUS )
# 1882 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 77 ->
# 497 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return PLUSDOT )
# 1887 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 78 ->
# 498 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return PLUSEQ )
# 1892 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 79 ->
# 499 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return MINUS )
# 1897 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 80 ->
# 500 "src/ocaml/preprocess/402/lexer_raw.mll"
         ( return MINUSDOT )
# 1902 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 81 ->
# 503 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return (PREFIXOP(Lexing.lexeme lexbuf)) )
# 1907 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 82 ->
# 505 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return (PREFIXOP(Lexing.lexeme lexbuf)) )
# 1912 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 83 ->
# 507 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return (keyword_or state (Lexing.lexeme lexbuf)
                       (INFIXOP0(Lexing.lexeme lexbuf))) )
# 1918 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 84 ->
# 510 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return (INFIXOP1(Lexing.lexeme lexbuf)) )
# 1923 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 85 ->
# 512 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return (INFIXOP2(Lexing.lexeme lexbuf)) )
# 1928 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 86 ->
# 514 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return (INFIXOP4(Lexing.lexeme lexbuf)) )
# 1933 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 87 ->
# 515 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return PERCENT )
# 1938 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 88 ->
# 517 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return (INFIXOP3(Lexing.lexeme lexbuf)) )
# 1943 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 89 ->
# 519 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( let s = Lexing.lexeme lexbuf in
              return (try Hashtbl.find state.keywords s
                      with Not_found -> SHARPOP s) )
# 1950 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 90 ->
# 523 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( return (LETOP(Lexing.lexeme lexbuf)) )
# 1955 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 91 ->
# 526 "src/ocaml/preprocess/402/lexer_raw.mll"
            ( let s = Lexing.lexeme lexbuf in
              return (try Hashtbl.find state.keywords s
                      with Not_found -> SHARPOP s) )
# 1962 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 92 ->
# 529 "src/ocaml/preprocess/402/lexer_raw.mll"
        ( return EOF )
# 1967 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 93 ->
# 532 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( fail (Illegal_character (Lexing.lexeme_char lexbuf 0))
              (Location.curr lexbuf)
      )
# 1974 "src/ocaml/preprocess/402/lexer_raw.ml"

  | __ocaml_lex_state -> __ocaml_lex_refill
      (fun lexbuf -> lexbuf.Lexing.refill_buff lexbuf;
         __ocaml_lex_token_rec state lexbuf __ocaml_lex_state) lexbuf

and comment state lexbuf =
   __ocaml_lex_comment_rec state lexbuf 136
and __ocaml_lex_comment_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 538 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( state.comment_start_loc <- (Location.curr lexbuf) :: state.comment_start_loc;
      Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
      comment state lexbuf
    )
# 1990 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 1 ->
# 543 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( match state.comment_start_loc with
        | [] -> assert false
        | [_] -> state.comment_start_loc <- []; return (Location.curr lexbuf)
        | _ :: l -> state.comment_start_loc <- l;
                  Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
                  comment state lexbuf
       )
# 2001 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 2 ->
# 551 "src/ocaml/preprocess/402/lexer_raw.mll"
      (
        state.string_start_loc <- Location.curr lexbuf;
        Buffer.add_char state.buffer '\"';
        let buffer = state.buffer in
        state.buffer <- Buffer.create 15;
        (catch (string state lexbuf) (fun e l -> match e with
             | Unterminated_string ->
               begin match state.comment_start_loc with
                 | [] -> assert false
                 | loc :: _ ->
                   let start = List.hd (List.rev state.comment_start_loc) in
                   state.comment_start_loc <- [];
                   fail (Unterminated_string_in_comment (start, l)) loc
               end
             | e -> fail e l
           )
        ) >>= fun () ->
      state.string_start_loc <- Location.none;
      Buffer.add_string buffer (String.escaped (Buffer.contents state.buffer));
      state.buffer <- buffer;
      Buffer.add_char state.buffer '\"';
      comment state lexbuf )
# 2027 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 3 ->
# 574 "src/ocaml/preprocess/402/lexer_raw.mll"
      (
        let delim = Lexing.lexeme lexbuf in
        let delim = String.sub delim ~pos:1 ~len:(String.length delim - 2) in
        state.string_start_loc <- Location.curr lexbuf;
        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
        (catch (quoted_string state delim lexbuf) (fun e l -> match e with
             | Unterminated_string ->
               begin match state.comment_start_loc with
                 | [] -> assert false
                 | loc :: _ ->
                   let start = List.hd (List.rev state.comment_start_loc) in
                   state.comment_start_loc <- [];
                   fail (Unterminated_string_in_comment (start, l)) loc
               end
             | e -> fail e l
           )
        ) >>= fun () ->
        state.string_start_loc <- Location.none;
        Buffer.add_char state.buffer '|';
        Buffer.add_string state.buffer delim;
        Buffer.add_char state.buffer '}';
        comment state lexbuf )
# 2053 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 4 ->
# 598 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf )
# 2058 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 5 ->
# 600 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( update_loc lexbuf None 1 false 1;
        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
        comment state lexbuf
      )
# 2066 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 6 ->
# 605 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf )
# 2071 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 7 ->
# 607 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf )
# 2076 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 8 ->
# 609 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf )
# 2081 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 9 ->
# 611 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf )
# 2086 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 10 ->
# 613 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( match state.comment_start_loc with
        | [] -> assert false
        | loc :: _ ->
          let start = List.hd (List.rev state.comment_start_loc) in
          state.comment_start_loc <- [];
          fail (Unterminated_comment start) loc
      )
# 2097 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 11 ->
# 621 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( update_loc lexbuf None 1 false 0;
        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
        comment state lexbuf
      )
# 2105 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 12 ->
# 626 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf )
# 2110 "src/ocaml/preprocess/402/lexer_raw.ml"

  | __ocaml_lex_state -> __ocaml_lex_refill
      (fun lexbuf -> lexbuf.Lexing.refill_buff lexbuf;
         __ocaml_lex_comment_rec state lexbuf __ocaml_lex_state) lexbuf

and string state lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1); __ocaml_lex_string_rec state lexbuf 168
and __ocaml_lex_string_rec state lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 630 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( return () )
# 2123 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 1 ->
let
# 631 "src/ocaml/preprocess/402/lexer_raw.mll"
                                  space
# 2129 "src/ocaml/preprocess/402/lexer_raw.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 632 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( update_loc lexbuf None 1 false (String.length space);
        string state lexbuf
      )
# 2135 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 2 ->
# 636 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_char state.buffer
          (char_for_backslash (Lexing.lexeme_char lexbuf 1));
        string state lexbuf )
# 2142 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 3 ->
# 640 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( char_for_decimal_code state lexbuf 1 >>= fun c ->
        Buffer.add_char state.buffer c;
        string state lexbuf )
# 2149 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 4 ->
# 644 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_char state.buffer (char_for_hexadecimal_code lexbuf 2);
        string state lexbuf )
# 2155 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 5 ->
# 647 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( if in_comment state
        then string state lexbuf
        else begin
(*  Should be an error, but we are very lax.
                  fail (Illegal_escape (Lexing.lexeme lexbuf),
                        (Location.curr lexbuf)
*)
          let loc = Location.curr lexbuf in
          Location.prerr_warning loc Warnings.Illegal_backslash;
          Buffer.add_char state.buffer (Lexing.lexeme_char lexbuf 0);
          Buffer.add_char state.buffer (Lexing.lexeme_char lexbuf 1);
          string state lexbuf
        end
      )
# 2173 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 6 ->
# 662 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( if not (in_comment state) then
          Location.prerr_warning (Location.curr lexbuf) Warnings.Eol_in_string;
        update_loc lexbuf None 1 false 0;
        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
        string state lexbuf
      )
# 2183 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 7 ->
# 669 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( let loc = state.string_start_loc in
        state.string_start_loc <- Location.none;
        fail Unterminated_string loc )
# 2190 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 8 ->
# 673 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_char state.buffer (Lexing.lexeme_char lexbuf 0);
        string state lexbuf )
# 2196 "src/ocaml/preprocess/402/lexer_raw.ml"

  | __ocaml_lex_state -> __ocaml_lex_refill
      (fun lexbuf -> lexbuf.Lexing.refill_buff lexbuf;
         __ocaml_lex_string_rec state lexbuf __ocaml_lex_state) lexbuf

and quoted_string state delim lexbuf =
   __ocaml_lex_quoted_string_rec state delim lexbuf 187
and __ocaml_lex_quoted_string_rec state delim lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 678 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( update_loc lexbuf None 1 false 0;
        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
        quoted_string state delim lexbuf
      )
# 2212 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 1 ->
# 683 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( let loc = state.string_start_loc in
        state.string_start_loc <- Location.none;
        fail Unterminated_string loc )
# 2219 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 2 ->
# 687 "src/ocaml/preprocess/402/lexer_raw.mll"
      (
        let edelim = Lexing.lexeme lexbuf in
        let edelim = String.sub edelim ~pos:1 ~len:(String.length edelim - 2) in
        if delim = edelim then return ()
        else (Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
              quoted_string state delim lexbuf)
      )
# 2230 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 3 ->
# 695 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( Buffer.add_char state.buffer (Lexing.lexeme_char lexbuf 0);
        quoted_string state delim lexbuf )
# 2236 "src/ocaml/preprocess/402/lexer_raw.ml"

  | __ocaml_lex_state -> __ocaml_lex_refill
      (fun lexbuf -> lexbuf.Lexing.refill_buff lexbuf;
         __ocaml_lex_quoted_string_rec state delim lexbuf __ocaml_lex_state) lexbuf

and skip_sharp_bang state lexbuf =
   __ocaml_lex_skip_sharp_bang_rec state lexbuf 196
and __ocaml_lex_skip_sharp_bang_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 700 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( update_loc lexbuf None 3 false 0; token state lexbuf )
# 2249 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 1 ->
# 702 "src/ocaml/preprocess/402/lexer_raw.mll"
      ( update_loc lexbuf None 1 false 0; token state lexbuf )
# 2254 "src/ocaml/preprocess/402/lexer_raw.ml"

  | 2 ->
# 703 "src/ocaml/preprocess/402/lexer_raw.mll"
       ( token state lexbuf )
# 2259 "src/ocaml/preprocess/402/lexer_raw.ml"

  | __ocaml_lex_state -> __ocaml_lex_refill
      (fun lexbuf -> lexbuf.Lexing.refill_buff lexbuf;
         __ocaml_lex_skip_sharp_bang_rec state lexbuf __ocaml_lex_state) lexbuf

;;

# 705 "src/ocaml/preprocess/402/lexer_raw.mll"
 
  type comment = string * Location.t

  (* preprocessor support not implemented, not compatible with monadic
     interface *)

  let rec token_without_comments state lexbuf =
    token state lexbuf >>= function
    | COMMENT _ ->
      token_without_comments state lexbuf
    | tok -> return tok

# 2280 "src/ocaml/preprocess/402/lexer_raw.ml"
